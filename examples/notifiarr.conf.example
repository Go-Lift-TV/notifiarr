###############################################
# Notifiarr Client Example Configuration File #
# Created by Notifiarr v0.1.15  @ 213108T0935 #
###############################################

# This API key must be copied from your notifiarr.com account.
api_key = "api-key-from-notifiarr.com"

## The ip:port to listen on for incoming HTTP requests. 0.0.0.0 means all/any IP and is recommended!
## You may use "127.0.0.1:5454" to listen only on localhost; good if using a local proxy.
## This is used to receive Plex webhooks and Media Request commands.
##
bind_addr = "0.0.0.0:5454"

## This application can update itself on Windows systems.
## Set this to "daily" to check GitHub every day for updates.
## You may also set it to a Go duration like "12h" or "72h".
## THIS ONLY WORKS ON WINDOWS
auto_update = "off"

## Quiet makes the app not log anything to output.
## Recommend setting log files if you make the app quiet.
## This is always true on Windows and macOS app.
## Log files are automatically written on those platforms.
##
quiet = false

## All API paths start with /api. This does not affect incoming /plex webhooks.
## Change it to /somethingelse/api by setting urlbase to "/somethingelse"
##
urlbase = "/"

## Allowed upstream networks. The networks here are allowed to send x-forwarded-for.
## Set this to your reverse proxy server's IP or network. If you leave off the mask,
## then /32 or /128 is assumed depending on IP version. Empty by default. Example:
##
#upstreams = [ "127.0.0.1/32", "::1/128" ]

## If you provide a cert and key file (pem) paths, this app will listen with SSL/TLS.
## Uncomment both lines and add valid file paths. Make sure this app can read them.
##
#ssl_key_file  = '/path/to/cert.key'
#ssl_cert_file = '/path/to/cert.key'

## If you set these, logs will be written to these files.
## If blank on windows or macOS, log file paths are chosen for you.
#log_file = '~/.notifiarr/notifiarr.log'
#http_log = '~/.notifiarr/notifiarr.http.log'
##
## Set this to the number of megabytes to rotate files.
log_file_mb = 100
##
## How many files to keep? 0 = all.
log_files = 0
##
## Unix file mode for new log files. Umask also affects this.
## Missing or 0 uses default of 0600. Permissive is 0644. Ignored by Windows.
file_mode = "0600"

## How often to send current application states for the dashboard.
##
send_dash = "0s"

## Web server and application timeouts.
##
timeout = "1m0s"


##################
# Starr Settings #
##################

## The API keys are specific to the app. Get it from Settings -> General.
## Configurations for unused apps are harmless. Set URL and API key for
## apps you have and want to make requests to using Media Bot.
## See the Service Checks section below for information about setting the names.
##
## Examples follow. UNCOMMENT (REMOVE #), AT MINIMUM: [[header]], url, api_key
#[[lidarr]]
#name        = "" # Set a name to enable checks of your service.
#url         = "http://lidarr:8989/"
#api_key     = ""
#check_q     = 0 # Check for items stuck in queue. 0 = no repeat, 1 to repeat every hour, 2 for every 2 hours, etc.

#[[radarr]]
#name        = "" # Set a name to enable checks of your service.
#url         = "http://127.0.0.1:7878/radarr"
#api_key     = ""
#disable_cf  = true  # Disable custom format sync.
#check_q     = 0 # Check for items stuck in queue. 0 = no repeat, 1 to repeat every hour, 2 for every 2 hours, etc.

#[[readarr]]
#name        = "" # Set a name to enable checks of your service.
#url         = "http://127.0.0.1:8787/readarr"
#api_key     = ""
#check_q     = 0 # Check for items stuck in queue. 0 = no repeat, 1 to repeat every hour, 2 for every 2 hours, etc.

#[[sonarr]]
#name        = ""  # Set a name to enable checks of your service.
#url         = "http://sonarr:8989/"
#api_key     = ""
#disable_cf  = true # Disable release profile sync.
#check_q     = 0    # Check for items stuck in queue. 0 = no repeat, 1 to repeat every hour, 2 for every 2 hours, etc.


# Download Client Configs (below) are used for dashboard state and service checks.

#[[deluge]]
#name     = ""  # Set a name to enable checks of your service.
#url      = "http://deluge:8112/"
#password = ""


#[[qbit]]
#name     = ""  # Set a name to enable checks of your service.
#url      = "http://qbit:8080/"
#user     = ""
#pass     = ""


#################
# Plex Settings #
#################

## Find your token: https://support.plex.tv/articles/204059436-finding-an-authentication-token-x-plex-token/
##
[plex]
  url         = "http://localhost:32400" # Your plex URL
  token       = ""            # your plex token; get this from a web inspector
  interval    = "30m0s"       # how often to send session data, 0 = off
  cooldown    = "15s"         # how often plex webhooks may trigger session hooks
  account_map = ""            # shared plex servers: map an email to a name, ex: "som@ema.il,Name|some@ther.mail,name"
  movies_percent_complete = 0 # 0, 70-99, send notifications when a movie session is this % complete.
  series_percent_complete = 0 # 0, 70-99, send notifications when an episode session is this % complete.


#####################
# Snapshot Settings #
#####################

## Install package(s)
##  - Windows:  smartmontools - https://sourceforge.net/projects/smartmontools/
##  - Linux:    apt install smartmontools || yum install smartmontools
##  - Docker:   Already Included. Run in --privileged mode.
##  - Synology: opkg install smartmontools
##  - Entware:  https://github.com/Entware/Entware-ng/wiki/Install-on-Synology-NAS
##  - Entware Package List:  https://github.com/Entware/Entware-ng/wiki/Install-on-Synology-NAS
##
[snapshot]
  interval          = "30m0s" # how often to send a snapshot, 0 = off, 30m - 2h recommended
  timeout           = "30s" # how long a snapshot may take
  monitor_raid      = false # mdadm / megacli
  monitor_drives    = false # smartctl: age, temp, health
  monitor_space     = false # disk usage for all partitions
  monitor_uptime    = false # system data, users, hostname, uptime, os, build
  monitor_cpuMemory = false # literally cpu usage, load averages, and memory
  monitor_cpuTemp   = false # cpu temperatures, not available on all platforms
  zfs_pools         = []    # list of zfs pools, ex: zfs_pools=["data", "data2"]
  use_sudo          = false # sudo is needed on unix when monitor_drives=true or for megacli.
## Example sudoers entries follow; these go in /etc/sudoers.d. Fix the paths to smartctl and MegaCli.
## notifiarr ALL=(root) NOPASSWD:/usr/sbin/smartctl *
## notifiarr ALL=(root) NOPASSWD:/usr/sbin/MegaCli64 -LDInfo -Lall -aALL


##################
# Service Checks #
##################

## This application performs service checks on configured services at the specified interval.
## The service states are sent to Notifiarr.com. Failed services generate a notification.
## Setting names on Starr apps (above) enables service checks for that app.
## Use the [[service]] directive to add more service checks. Example below.

[services]
  disabled = false   # Setting this to true disables all service checking routines.
  parallel = 1       # How many services to check concurrently. 1 should be enough.
  interval = "10m0s" # How often to send service states to Notifiarr.com. Minimum = 5m.
  log_file = ''      # Service Check logs go to the app log by default. Change that by setting a services.log file here.

## Uncomment the following section to create a service check on a URL or IP:port.
## You may include as many [[service]] sections as you have services to check.
## Do not add Radarr, Sonarr, Readarr or Lidarr here! Add a name to enable their checks.
##
## Example with comments follows.
#[[service]]
#  name     = "MyServer"          # name must be unique
#  type     = "http"              # type can be "http" or "tcp"
#  check    = 'http://127.0.0.1'  # url for 'http', host/IP:port for 'tcp'
#  expect   = "200"               # return code to expect (for http only)
#  timeout  = "10s"               # how long to wait for tcp or http checks.
#  interval = "5m"                # how often to check this service.

## Another example. Remember to uncomment [[service]] if you use this!
##
#[[service]]
#  name    = "Bazarr"
#  type    = "http"
#  check   = 'http://10.1.1.2:6767/series/'
#  expect  = "200"
#  timeout = "10s"
